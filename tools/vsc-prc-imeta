#!/usr/bin/env python
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from vsc_irods.session import VSCiRODSSession


desc = """imeta-like command using the VSC Python iRODS client

Examples:

vsc-prc-imeta "~/data/molec*/c*.xyz" --object_avu=Kind,organic --verbose
vsc-prc-imeta "~/data/*.txt" --object_avu=creator,username --action=remove
vsc-prc-imeta -r /tempZone/home/username/tmp/ --collection_avu='tempdir'
"""

arg_parser = ArgumentParser(description=desc,
                            formatter_class=RawDescriptionHelpFormatter)

arg_parser.add_argument('args', nargs='*',
                        help='glob pattern(s) for iRODS collections and data '
                        'objects for which metadata will be modified. '
                        'Note that, when including asterisks or a tilde in '
                        'in a pattern, the pattern needs to be enclosed in '
                        'quotes to avoid shell expansion to local paths.')

arg_parser.add_argument('--action', default='add',
                        help='The action to perform. Choose either "add" '
                        '(default)  or "remove".')

arg_parser.add_argument('--collection_avu', action='append',
                        help='AVU tuple to be added to the matching '
                        'collections, in the form of a comma-separated '
                        'AttName[,AttValue[,AttUnits]] list.')

arg_parser.add_argument('--object_avu', action='append',
                        help='AVU tuple to be added to the matching '
                        'data objects, in the form of a comma-separated '
                        'AttName[,AttValue[,AttUnits]] list.')

arg_parser.add_argument('-r', '--recurse', action='store_true',
                        help='Turns on recursion.')

arg_parser.add_argument('-v', '--verbose', action='store_true',
                        help='Increases the verbosity level.')

options = arg_parser.parse_args()


with VSCiRODSSession(txt='-') as session:
    collection_avu = [] if options.collection_avu is None else \
                     [tuple(avu.split(',')) for avu in options.collection_avu]
    object_avu = [] if options.object_avu is None else \
                 [tuple(avu.split(',')) for avu in options.object_avu]

    for arg in options.args:
        session.bulk.metadata(arg, action=options.action,
                              collection_avu=collection_avu,
                              object_avu=object_avu,
                              recurse=options.recurse,
                              verbose=options.verbose)
