#!/usr/bin/env python
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from vsc_irods.session import VSCiRODSSession


desc = """Search for iRODS data objects and collections using the
VSC Python iRODS client

Example:

vsc-prc-find "~/data/" --name="*.xyz" --object_avu="=,Kind;like,%org%" --types=f
"""

arg_parser = ArgumentParser(description=desc,
                            formatter_class=RawDescriptionHelpFormatter)

arg_parser.add_argument('arg', nargs='?', default='.',
                        help='Root of the iRODS collection tree in which to '
                        'search '
                        'Note that, when including asterisks or a tilde in '
                        'in a pattern, the pattern needs to be enclosed in '
                        'quotes to avoid shell expansion to local paths.')

arg_parser.add_argument('-n', '--name', default='',
                        help='glob pattern(s) for the basenames of iRODS '
                        'collections and data objects in the search tree. '
                        'Note that, when including asterisks or a tilde in '
                        'in a pattern, the pattern needs to be enclosed in '
                        'quotes to avoid shell expansion to local paths.')

arg_parser.add_argument('--wholename', default='',
                        help='glob pattern(s) for the whole names (which may '
                        'hence include slashes) of iRODS collections and '
                        'data objects in the search tree. '
                        'Note that, when including asterisks or a tilde in '
                        'in a pattern, the pattern needs to be enclosed in '
                        'quotes to avoid shell expansion to local paths.')

arg_parser.add_argument('--collection_avu', default='',
                        help='AVU tuple to be added to the matching '
                        'collections, in the form of a comma-separated '
                        'AttName[,AttValue[,AttUnits]] list')

arg_parser.add_argument('--object_avu', default='',
                        help='AVU tuple to be added to the matching '
                        'data objects, in the form of a comma-separated '
                        'AttName[,AttValue[,AttUnits]] list')

arg_parser.add_argument('-t', '--types', default='d,f',
                        help='Comma-separated list of one or more of the '
                        'following characters to select the type of results '
                        'to include: "d" for directories (i.e. collections), '
                        '"f" for files (i.e. data objects)')

arg_parser.add_argument('--debug', action='store_true',
                        help='Increases the verbosity level for debugging')

options = arg_parser.parse_args()


def parse_avu_string(avu_str):
    return tuple(avu_str.split(';')) if avu_str else []


with VSCiRODSSession(txt='-') as session:
    collection_avu = parse_avu_string(options.collection_avu)
    object_avu = parse_avu_string(options.object_avu)

    use_wholename = len(options.wholename) > 0

    if use_wholename:
        assert len(options.name) == 0, \
               'Use either --name or --wholename, but not both'
        pattern = wholename
    else:
        pattern = options.name if len(options.name) > 0 else '*'

    iterator = session.search.find(irods_path=options.arg,
                                   pattern=pattern,
                                   use_wholename=use_wholename,
                                   collection_avu=collection_avu,
                                   object_avu=object_avu,
                                   types=options.types,
                                   debug=options.debug)
    for item in iterator:
        print(item)
